4---------------------------------------------------------------------------------
Grouping Data Values - Array And Slice
+++++++++++++++++++++
arrays - mostly used for go internals, doesnt change in size
slice - holds values of the same types
    built on top of array, can change size
    has length & capacity
map - key/value 
    unordered group of vals of 1 type and keys of another type
struct- 
    data structure
    composite type 
    can collect values of diff types
---------------------------------------------------------------------------------
arrays
    a1 := [2]int{1, 2}
	fmt.Println(a1)

	a2 := [...]string{"hi", "my", "name", "is", "rob"}
	fmt.Println(a2)

	var a3 [2]int
	a3[0] = 1
	a3[1] = 42

    len()
        len(a1) 
---------------------------------------------------------------------------------
slice
    just like array but no specified length
    
    slice literal ex:
        s := []int {1,2}

    for index, flavor := range iceCreamFlavors {
		fmt.Println("flavor number: ", index, "flavor name: ", flavor)
	}
+++++++++++++++++++++
    access by index 
    s[0]
    s[1]
+++++++++++++++++++++
    appending
    s = append(s, 3,4,5)
+++++++++++++++++++++
    slicing a slice
        cutting parts of the slice away 
        	//inclusive:exclusive
            fmt.Println("si[0:1]", si[0:1])
            fmt.Println("si[1:4]", si[1:4])
            //exclusive
            fmt.Println("si[:4]", si[:4])

            //inclusive
            fmt.Println("si[5:]", si[5:])
+++++++++++++++++++++
    deleting a slice
+++++++++++++++++++++
+++++++++++++++++++++
    multi-dimensional slice
        sa := []string{"a", "b", "c", "d"}
        sb := []string{"e", "f", "g", "h"}

        sc := [][]string{sa, sb}
+++++++++++++++++++++
---------------------------------------------------------------------------------
